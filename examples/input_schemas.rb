#!/usr/bin/env ruby
# frozen_string_literal: true

require_relative "../lib/anthropic"

class Airport < Anthropic::BaseModel
  required :code, String, min_length: 3, doc: "IATA airport code (e.g., JFK, LHR)"
  required :name, String, doc: "Full airport name"
  optional :hub_for, Airport, doc: "Parent hub airport (recursive reference)"

  doc "Airport location with optional hub relationship"
end

class Passenger < Anthropic::BaseModel
  required :type, Anthropic::EnumOf[:adult, :child, :infant]
  required :name, String, min_length: 2
  optional :seat_preference,
           Anthropic::EnumOf[:window, :aisle, :any],
           nil?: true
  optional :bags, Integer, nil?: true

  doc "Passenger information with travel preferences"
end

class LoyaltyProgram < Anthropic::BaseModel
  required :airline, String, min_length: 2
  required :number, String
  optional :tier, Anthropic::EnumOf[:basic, :silver, :gold, :platinum]

  doc "Frequent flyer program membership details"
end

class FlightSearch < Anthropic::BaseModel
  required :origin, Anthropic::UnionOf[String, Airport]
  required :destination, Anthropic::UnionOf[String, Airport]

  required :departure_date, String
  optional :return_date, String, nil?: true

  required :passengers, Anthropic::ArrayOf[Passenger]

  required :cabin, Anthropic::EnumOf[:economy, :premium, :business, :first]

  optional :flexible_dates, Anthropic::Boolean
  optional :nonstop_only, Anthropic::Boolean, nil?: true

  optional :preferred_airlines, Anthropic::ArrayOf[String], nil?: true

  optional :max_price, Integer
  optional :max_stops, Integer, nil?: true

  optional :loyalty_programs, Anthropic::ArrayOf[LoyaltyProgram]

  doc "Search for flights with comprehensive filtering options"
end

# you can view the JSON schema generated by BaseModel:
# schema = FlightSearch.to_json_schema
# puts JSON.pretty_generate(schema)

puts "--------- input schema tool use ----------"
begin
  # gets API credentials from environment variable `ANTHROPIC_API_KEY`
  anthropic = Anthropic::Client.new

  message = anthropic.messages.create(
    model: "claude-sonnet-4-20250514",
    max_tokens: 1024,
    tools: [FlightSearch],
    messages: [
      {
        role: "user",
        content: "Find me flights from New York to London on March 15th for 2 adults and 1 child, " \
                 "business class, returning March 22nd. I prefer Anthropic Airways and have AA Gold status."
      }
    ]
  )

  tool_use = message.content.find { _1.type == :tool_use }
  if tool_use && tool_use.parsed
    puts(<<~FMT)
      Flight search tool use:
      #{tool_use.input}
      Parsed fields:
        Origin: #{tool_use.parsed.origin}
        Destination: #{tool_use.parsed.destination}
        Departure: #{tool_use.parsed.departure_date}
        Return: #{tool_use.parsed.return_date}
        Cabin: #{tool_use.parsed.cabin}
        Passengers: #{tool_use.parsed.passengers.map(&:type).tally}
    FMT

    if tool_use.parsed.loyalty_programs
      puts("  Loyalty: #{tool_use.parsed.loyalty_programs.first.airline} #{tool_use.parsed.loyalty_programs.first.tier}")
    end
  end
end

module Anthropic
  module Models
    module Beta
      type message_count_tokens_params =
        {
          messages: ::Array[Anthropic::Models::Beta::BetaMessageParam],
          model: Anthropic::Models::model,
          system_: Anthropic::Models::Beta::MessageCountTokensParams::system_,
          thinking: Anthropic::Models::Beta::beta_thinking_config_param,
          tool_choice: Anthropic::Models::Beta::beta_tool_choice,
          tools: ::Array[Anthropic::Models::Beta::MessageCountTokensParams::tool],
          betas: ::Array[Anthropic::Models::anthropic_beta]
        }
        & Anthropic::request_parameters

      class MessageCountTokensParams < Anthropic::BaseModel
        extend Anthropic::RequestParameters::Converter
        include Anthropic::RequestParameters

        attr_accessor messages: ::Array[Anthropic::Models::Beta::BetaMessageParam]

        attr_accessor model: Anthropic::Models::model

        attr_reader system_: Anthropic::Models::Beta::MessageCountTokensParams::system_?

        def system_=: (
          Anthropic::Models::Beta::MessageCountTokensParams::system_
        ) -> Anthropic::Models::Beta::MessageCountTokensParams::system_

        attr_reader thinking: Anthropic::Models::Beta::beta_thinking_config_param?

        def thinking=: (
          Anthropic::Models::Beta::beta_thinking_config_param
        ) -> Anthropic::Models::Beta::beta_thinking_config_param

        attr_reader tool_choice: Anthropic::Models::Beta::beta_tool_choice?

        def tool_choice=: (
          Anthropic::Models::Beta::beta_tool_choice
        ) -> Anthropic::Models::Beta::beta_tool_choice

        attr_reader tools: ::Array[Anthropic::Models::Beta::MessageCountTokensParams::tool]?

        def tools=: (
          ::Array[Anthropic::Models::Beta::MessageCountTokensParams::tool]
        ) -> ::Array[Anthropic::Models::Beta::MessageCountTokensParams::tool]

        attr_reader betas: ::Array[Anthropic::Models::anthropic_beta]?

        def betas=: (
          ::Array[Anthropic::Models::anthropic_beta]
        ) -> ::Array[Anthropic::Models::anthropic_beta]

        def initialize: (
          messages: ::Array[Anthropic::Models::Beta::BetaMessageParam],
          model: Anthropic::Models::model,
          ?system_: Anthropic::Models::Beta::MessageCountTokensParams::system_,
          ?thinking: Anthropic::Models::Beta::beta_thinking_config_param,
          ?tool_choice: Anthropic::Models::Beta::beta_tool_choice,
          ?tools: ::Array[Anthropic::Models::Beta::MessageCountTokensParams::tool],
          ?betas: ::Array[Anthropic::Models::anthropic_beta],
          ?request_options: Anthropic::request_opts
        ) -> void

        def to_hash: -> Anthropic::Models::Beta::message_count_tokens_params

        type system_ =
          String | ::Array[Anthropic::Models::Beta::BetaTextBlockParam]

        module System
          extend Anthropic::Union

          type beta_text_block_param_array =
            ::Array[Anthropic::Models::Beta::BetaTextBlockParam]

          BetaTextBlockParamArray: beta_text_block_param_array

          def self.variants: -> [String, ::Array[Anthropic::Models::Beta::BetaTextBlockParam]]
        end

        type tool =
          Anthropic::Models::Beta::BetaTool
          | Anthropic::Models::Beta::BetaToolComputerUse20241022
          | Anthropic::Models::Beta::BetaToolBash20241022
          | Anthropic::Models::Beta::BetaToolTextEditor20241022
          | Anthropic::Models::Beta::BetaToolComputerUse20250124
          | Anthropic::Models::Beta::BetaToolBash20250124
          | Anthropic::Models::Beta::BetaToolTextEditor20250124

        module Tool
          extend Anthropic::Union

          def self.variants: -> [Anthropic::Models::Beta::BetaTool, Anthropic::Models::Beta::BetaToolComputerUse20241022, Anthropic::Models::Beta::BetaToolBash20241022, Anthropic::Models::Beta::BetaToolTextEditor20241022, Anthropic::Models::Beta::BetaToolComputerUse20250124, Anthropic::Models::Beta::BetaToolBash20250124, Anthropic::Models::Beta::BetaToolTextEditor20250124]
        end
      end
    end
  end
end

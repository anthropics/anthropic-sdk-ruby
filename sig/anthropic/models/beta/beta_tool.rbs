module Anthropic
  module Models
    class BetaTool = Beta::BetaTool

    module Beta
      type beta_tool =
        {
          input_schema: Anthropic::Models::Beta::BetaTool::InputSchema,
          name: String,
          cache_control: Anthropic::Models::Beta::BetaCacheControlEphemeral?,
          description: String,
          type: Anthropic::Models::Beta::BetaTool::type_?
        }

      class BetaTool < Anthropic::Internal::Type::BaseModel
        attr_accessor input_schema: Anthropic::Models::Beta::BetaTool::InputSchema

        attr_accessor name: String

        attr_accessor cache_control: Anthropic::Models::Beta::BetaCacheControlEphemeral?

        attr_reader description: String?

        def description=: (String) -> String

        attr_accessor type: Anthropic::Models::Beta::BetaTool::type_?

        def initialize: (
          input_schema: Anthropic::Models::Beta::BetaTool::InputSchema,
          name: String,
          ?cache_control: Anthropic::Models::Beta::BetaCacheControlEphemeral?,
          ?description: String,
          ?type: Anthropic::Models::Beta::BetaTool::type_?
        ) -> void

        def to_hash: -> Anthropic::Models::Beta::beta_tool

        type input_schema = { type: :object, properties: top? }

        class InputSchema < Anthropic::Internal::Type::BaseModel
          attr_accessor type: :object

          attr_accessor properties: top?

          def initialize: (?properties: top?, ?type: :object) -> void

          def to_hash: -> Anthropic::Models::Beta::BetaTool::input_schema
        end

        type type_ = :custom

        module Type
          extend Anthropic::Internal::Type::Enum

          CUSTOM: :custom

          def self?.values: -> ::Array[Anthropic::Models::Beta::BetaTool::type_]
        end
      end
    end
  end
end

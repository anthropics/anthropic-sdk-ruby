module Anthropic
  module Models
    type message_create_params =
      {
        max_tokens: Integer,
        messages: ::Array[Anthropic::Models::MessageParam],
        model: Anthropic::Models::model,
        metadata: Anthropic::Models::Metadata,
        stop_sequences: ::Array[String],
        system_: Anthropic::Models::MessageCreateParams::system_,
        temperature: Float,
        thinking: Anthropic::Models::thinking_config_param,
        tool_choice: Anthropic::Models::tool_choice,
        tools: ::Array[Anthropic::Models::tool_union],
        top_k: Integer,
        top_p: Float
      }
      & Anthropic::Internal::Type::request_parameters

    class MessageCreateParams < Anthropic::BaseModel
      extend Anthropic::Internal::Type::RequestParameters::Converter
      include Anthropic::Internal::Type::RequestParameters

      attr_accessor max_tokens: Integer

      attr_accessor messages: ::Array[Anthropic::Models::MessageParam]

      attr_accessor model: Anthropic::Models::model

      attr_reader metadata: Anthropic::Models::Metadata?

      def metadata=: (
        Anthropic::Models::Metadata
      ) -> Anthropic::Models::Metadata

      attr_reader stop_sequences: ::Array[String]?

      def stop_sequences=: (::Array[String]) -> ::Array[String]

      attr_reader system_: Anthropic::Models::MessageCreateParams::system_?

      def system_=: (
        Anthropic::Models::MessageCreateParams::system_
      ) -> Anthropic::Models::MessageCreateParams::system_

      attr_reader temperature: Float?

      def temperature=: (Float) -> Float

      attr_reader thinking: Anthropic::Models::thinking_config_param?

      def thinking=: (
        Anthropic::Models::thinking_config_param
      ) -> Anthropic::Models::thinking_config_param

      attr_reader tool_choice: Anthropic::Models::tool_choice?

      def tool_choice=: (
        Anthropic::Models::tool_choice
      ) -> Anthropic::Models::tool_choice

      attr_reader tools: ::Array[Anthropic::Models::tool_union]?

      def tools=: (
        ::Array[Anthropic::Models::tool_union]
      ) -> ::Array[Anthropic::Models::tool_union]

      attr_reader top_k: Integer?

      def top_k=: (Integer) -> Integer

      attr_reader top_p: Float?

      def top_p=: (Float) -> Float

      def initialize: (
        max_tokens: Integer,
        messages: ::Array[Anthropic::Models::MessageParam],
        model: Anthropic::Models::model,
        ?metadata: Anthropic::Models::Metadata,
        ?stop_sequences: ::Array[String],
        ?system_: Anthropic::Models::MessageCreateParams::system_,
        ?temperature: Float,
        ?thinking: Anthropic::Models::thinking_config_param,
        ?tool_choice: Anthropic::Models::tool_choice,
        ?tools: ::Array[Anthropic::Models::tool_union],
        ?top_k: Integer,
        ?top_p: Float,
        ?request_options: Anthropic::request_opts
      ) -> void

      def to_hash: -> Anthropic::Models::message_create_params

      type system_ = String | ::Array[Anthropic::Models::TextBlockParam]

      module System
        extend Anthropic::Union

        def self?.variants: -> [String, ::Array[Anthropic::Models::TextBlockParam]]

        type text_block_param_array = ::Array[Anthropic::Models::TextBlockParam]

        TextBlockParamArray: text_block_param_array
      end
    end
  end
end

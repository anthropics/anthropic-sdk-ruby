module Anthropic
  module Models
    type raw_message_delta_event =
      {
        delta: Anthropic::Models::RawMessageDeltaEvent::Delta,
        type: :message_delta,
        usage: Anthropic::Models::MessageDeltaUsage
      }

    class RawMessageDeltaEvent < Anthropic::BaseModel
      attr_accessor delta: Anthropic::Models::RawMessageDeltaEvent::Delta

      attr_accessor type: :message_delta

      attr_accessor usage: Anthropic::Models::MessageDeltaUsage

      def initialize: (
        delta: Anthropic::Models::RawMessageDeltaEvent::Delta,
        usage: Anthropic::Models::MessageDeltaUsage,
        ?type: :message_delta
      ) -> void

      def to_hash: -> Anthropic::Models::raw_message_delta_event

      type delta =
        {
          stop_reason: Anthropic::Models::RawMessageDeltaEvent::Delta::stop_reason?,
          stop_sequence: String?
        }

      class Delta < Anthropic::BaseModel
        attr_accessor stop_reason: Anthropic::Models::RawMessageDeltaEvent::Delta::stop_reason?

        attr_accessor stop_sequence: String?

        def initialize: (
          stop_reason: Anthropic::Models::RawMessageDeltaEvent::Delta::stop_reason?,
          stop_sequence: String?
        ) -> void

        def to_hash: -> Anthropic::Models::RawMessageDeltaEvent::delta

        type stop_reason = :end_turn | :max_tokens | :stop_sequence | :tool_use

        module StopReason
          extend Anthropic::Enum

          END_TURN: :end_turn
          MAX_TOKENS: :max_tokens
          STOP_SEQUENCE: :stop_sequence
          TOOL_USE: :tool_use

          def self.values: -> ::Array[Anthropic::Models::RawMessageDeltaEvent::Delta::stop_reason]
        end
      end
    end
  end
end
